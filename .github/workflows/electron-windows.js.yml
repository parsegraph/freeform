# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deploy Electron app for Windows

on:
  push:
    branches: electron

jobs:
  build:
    runs-on: windows-latest
    steps:
    - run: mkdir -p ~/.ssh
    - run: if ($Env:SSH_TOKEN.Length -lt 100) { throw "token too short" }
      env:
          SSH_TOKEN: ${{ secrets.PARSEGRAPH_SSH_TOKEN }}
    - run: if ("" -eq "") { [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($Env:SSH_TOKEN)) | Out-File -FilePath $HOME/.ssh/id_rsa -NoNewline }
      env:
          SSH_TOKEN: ${{ secrets.PARSEGRAPH_SSH_TOKEN }}
    - run: chmod 0400 $HOME/.ssh/id_rsa
    - run: if ("$Env:SSH_TOKEN_SHA1SUM" -ne (Get-FileHash -Algorithm SHA1 $HOME/.ssh/id_rsa).Hash.ToLower()) { throw "sha1sum not equal" }
      env:
          SSH_TOKEN_SHA1SUM: ${{ secrets.PARSEGRAPH_SSH_TOKEN_SHA1SUM }}
    - run: if ("" -eq "") { [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($Env:SSH_KNOWN_HOST)) | Out-File -FilePath $HOME/.ssh/known_hosts }
      env:
          SSH_KNOWN_HOST: ${{ secrets.PARSEGRAPH_SSH_KNOWN_HOST }}

    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 20
        registry-url: 'https://registry.npmjs.org'
    - run: cd occluder && yarn && yarn build && cp dist/main.js ../public/occluder.js && cd -
    - run: yarn
    - run: yarn build
    - run: cd electron && yarn
    - run: cd electron && cp -Force ../build/favicon.ico .
    - run: cd electron && cp -Force ../build/index.html .
    - run: cd electron && sed -i -re 's/React App/parsegraph/g' ./index.html
    - run: cd electron && cp -r -Force ../build/static .
    - run: cd electron && yarn make

    - run: set VERSION (node -e 'console.log(JSON.parse(require("fs").readFileSync("electron/package.json")).version)') && ssh $Env:SSH_HOST "mkdir -p $Env:PARSEGRAPH_PUBLIC_HTML/electron/$VERSION"
      env:
          PARSEGRAPH_PUBLIC_HTML: ${{ secrets.PARSEGRAPH_PUBLIC_HTML }}
          SSH_HOST: ${{ secrets.PARSEGRAPH_SSH_HOST }}
    - run: set VERSION (node -e 'console.log(JSON.parse(require("fs").readFileSync("electron/package.json")).version)') && cd electron/out/make && pscp * "$Env:SSH_HOST:$Env:PARSEGRAPH_PUBLIC_HTML/electron/$VERSION/" && ssh $Env:SSH_HOST "cd $Env:PARSEGRAPH_PUBLIC_HTML/electron; rm -f latest; ln -s $VERSION latest"
      env:
          PARSEGRAPH_PUBLIC_HTML: ${{ secrets.PARSEGRAPH_PUBLIC_HTML }}
          SSH_HOST: ${{ secrets.PARSEGRAPH_SSH_HOST }}
